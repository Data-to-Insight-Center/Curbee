package org.seadva.registry.database.model.obj.vaRegistry;

import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IMetadataReference;


/** 
 * Object mapping for hibernate-handled table: metadata_reference.
 * @author autogenerated
 */


public class MetadataReference implements IMetadataReference {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002630L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/** Field mapping. */
	private MetadataType metadata;
	/** Field mapping. */
	private BaseEntity objectEntity;
	/** Field mapping. */
	private BaseEntity subjectEntity;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public MetadataReference() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public MetadataReference(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Long object;
	 * @param metadata MetadataType object;
	 * @param objectEntity BaseEntity object;
	 * @param subjectEntity BaseEntity object;
	 */
	public MetadataReference(Long id, MetadataType metadata, BaseEntity objectEntity, 					
			BaseEntity subjectEntity) {

		this.id = id;
		this.metadata = metadata;
		this.objectEntity = objectEntity;
		this.subjectEntity = subjectEntity;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	public Class<?> getClassType() {
		return MetadataReference.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */

	public Long getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: metadata.
	 * @return A MetadataType object (this.metadata)
	 */

	public MetadataType getMetadata() {
		return this.metadata;
		
	}
	

  
    /**  
     * Set the value related to the column: metadata.
	 * @param metadata the metadata value you wish to set
	 */
	public void setMetadata(final MetadataType metadata) {
		this.metadata = metadata;
	}

    /**
     * Return the value associated with the column: objectEntity.
	 * @return A BaseEntity object (this.objectEntity)
	 */
	public BaseEntity getObjectEntity() {
		return this.objectEntity;
		
	}
	

  
    /**  
     * Set the value related to the column: objectEntity.
	 * @param objectEntity the objectEntity value you wish to set
	 */
	public void setObjectEntity(final BaseEntity objectEntity) {
		this.objectEntity = objectEntity;
	}

    /**
     * Return the value associated with the column: subjectEntity.
	 * @return A BaseEntity object (this.subjectEntity)
	 */
	public BaseEntity getSubjectEntity() {
		return this.subjectEntity;
		
	}
	

  
    /**  
     * Set the value related to the column: subjectEntity.
	 * @param subjectEntity the subjectEntity value you wish to set
	 */
	public void setSubjectEntity(final BaseEntity subjectEntity) {
		this.subjectEntity = subjectEntity;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public MetadataReference clone() throws CloneNotSupportedException {
		
        final MetadataReference copy = (MetadataReference)super.clone();

		copy.setId(this.getId());
		copy.setMetadata(this.getMetadata());
		copy.setObjectEntity(this.getObjectEntity());
		copy.setSubjectEntity(this.getSubjectEntity());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		return sb.toString();		
	}


}
