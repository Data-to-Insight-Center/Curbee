package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.apache.log4j.Logger;
import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.AggregationDao;
import org.seadva.registry.database.model.dao.vaRegistry.CollectionDao;
import org.seadva.registry.database.model.dao.vaRegistry.FileDao;
import org.seadva.registry.database.model.obj.vaRegistry.*;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * DAO for table: Aggregation.
 * @author autogenerated
 */
@Repository
public class AggregationDaoImpl implements AggregationDao {
    private static Logger log = Logger.getLogger(AggregationDaoImpl.class);

    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }
    public AggregationDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
        collectionEntityDao = new CollectionDaoImpl();
        fileDao = new FileDaoImpl();
    }

    CollectionDao collectionEntityDao;
    FileDao fileDao;

    protected ObjectPool<Connection> connectionPool = null;

    @Override
    public List<AggregationWrapper> getAggregations(String parentId) {
        Connection connection = null;
        PreparedStatement statement = null;
        List<AggregationWrapper> aggregationList = new ArrayList<AggregationWrapper>();
        try {
            connection = getConnection();
            statement = connection.prepareStatement("SELECT * from aggregation where parent_id=?");
            statement.setString(1, parentId);
            ResultSet resultSet = null;
            resultSet = statement.executeQuery();


            while (resultSet.next()) {
                AggregationWrapper aggregationWrapper = new AggregationWrapper();
                String childId = resultSet.getString("child_id");



                if(collectionEntityDao.getCollection(childId)!=null)
                    aggregationWrapper.setChildType(Collection.class.getName());
                else if(fileDao.getFile(childId)!=null)
                    aggregationWrapper.setChildType(File.class.getName());
                else
                    aggregationWrapper.setChildType(BaseEntity.class.getName());


                if(collectionEntityDao.getCollection(parentId)!=null)
                    aggregationWrapper.setParentType(Collection.class.getName());
                else if(fileDao.getFile(parentId)!=null)
                    aggregationWrapper.setParentType(File.class.getName());
                else
                    aggregationWrapper.setParentType(BaseEntity.class.getName());

                BaseEntity child = new BaseEntity();
                child.setId(childId);
                BaseEntity parent = new BaseEntity();
                parent.setId(parentId);
                aggregationWrapper.setChild(child);
                aggregationWrapper.setParent(parent);
                aggregationList.add(aggregationWrapper);
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                  //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);
        }
        return aggregationList;
    }

    @Override
    public boolean putAggregation(Aggregation aggregation) {
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = getConnection();

            statement = connection.prepareStatement("INSERT IGNORE INTO aggregation values(?,?)");
            statement.setString(1, aggregation.getId().getParent().getId());
            statement.setString(2, aggregation.getId().getChild().getId());
            statement.executeUpdate();

            statement.close();
            log.debug("Done resetting unfinished raw notifications");
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }

        return true;
    }
}

