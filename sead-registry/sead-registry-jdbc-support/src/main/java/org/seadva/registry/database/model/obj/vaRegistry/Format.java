package org.seadva.registry.database.model.obj.vaRegistry;

import com.google.gson.annotations.Expose;
import org.hibernate.proxy.HibernateProxy;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IFormat;


/** 
 * Object mapping for hibernate-handled table: format.
 * @author autogenerated
 */

public class Format implements  IFormat {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002631L;


	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private File entity;
	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/** Field mapping. */
    @Expose
	private String type;
	/** Field mapping. */
    @Expose
	private String valuestr;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Format() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Format(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param entity File object;
	 * @param id Long object;
	 * @param valuestr String object;
	 */
	public Format(File entity, Long id, String valuestr) {

		this.entity = entity;
		this.id = id;
		this.valuestr = valuestr;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	public Class<?> getClassType() {
		return Format.class;
	}
 

    /**
     * Return the value associated with the column: entity.
	 * @return A File object (this.entity)
	 */
	public File getEntity() {
		return this.entity;
		
	}
	

  
    /**  
     * Set the value related to the column: entity.
	 * @param entity the entity value you wish to set
	 */
	public void setEntity(final File entity) {
		this.entity = entity;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
	public Long getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {

		this.id = id;
	}

    /**
     * Return the value associated with the column: type.
	 * @return A String object (this.type)
	 */
	public String getType() {
		return this.type;
		
	}
	

  
    /**  
     * Set the value related to the column: type.
	 * @param type the type value you wish to set
	 */
	public void setType(final String type) {
		this.type = type;
	}

    /**
     * Return the value associated with the column: valuestr.
	 * @return A String object (this.valuestr)
	 */
	public String getValuestr() {
		return this.valuestr;
		
	}
	

  
    /**  
     * Set the value related to the column: valuestr.
	 * @param valuestr the valuestr value you wish to set
	 */
	public void setValuestr(final String valuestr) {
		this.valuestr = valuestr;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Format clone() throws CloneNotSupportedException {
		
        final Format copy = (Format)super.clone();

		copy.setEntity(this.getEntity());
		copy.setId(this.getId());
		copy.setType(this.getType());
		copy.setValuestr(this.getValuestr());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("type: " + this.getType() + ", ");
		sb.append("valuestr: " + this.getValuestr());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see Object#equals(Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Format that; 
		try {
			that = (Format) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getEntity() == null) && (that.getEntity() == null)) || (getEntity() != null && getEntity().getId().equals(that.getEntity().getId())));	
		result = result && (((getType() == null) && (that.getType() == null)) || (getType() != null && getType().equals(that.getType())));
		result = result && (((getValuestr() == null) && (that.getValuestr() == null)) || (getValuestr() != null && getValuestr().equals(that.getValuestr())));
		return result;
	}

	
}
