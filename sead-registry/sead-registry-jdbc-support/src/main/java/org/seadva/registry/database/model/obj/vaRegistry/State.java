package org.seadva.registry.database.model.obj.vaRegistry;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.google.gson.annotations.Expose;
import org.hibernate.proxy.HibernateProxy;
import org.seadva.registry.database.enums.subtype.vaRegistry.BaseEntitySubclassType;
import org.seadva.registry.database.model.obj.vaRegistry.BaseEntity;
import org.seadva.registry.database.model.obj.vaRegistry.Collection;
import org.seadva.registry.database.model.obj.vaRegistry.Transition;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IState;


/** 
 * Object mapping for hibernate-handled table: state.
 * @author autogenerated
 */

@Entity
@PrimaryKeyJoinColumn(name = "state_id")
@Table(name = "state", catalog = "va_registry")
public class State extends BaseEntity implements  IState {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002620L;

	

	/** Field mapping. */
	private Set<Collection> collections = new HashSet<Collection>();

	/** Field mapping. */
    @Expose
	private String stateName;
	/** Field mapping. */
    @Expose
	private String stateType;
	/** Field mapping. */
	private Set<Transition> transitions = new HashSet<Transition>();

 

	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return BaseEntitySubclassType enum.
 	 */
 	@Transient
 	@Override
 	public BaseEntitySubclassType getBaseEntitySubclassType() {
		return BaseEntitySubclassType.STATE;
 	}  

 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return State.class;
	}
 

    /**
     * Return the value associated with the column: collection.
	 * @return A Set&lt;Collection&gt; object (this.collection)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "state"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	public Set<Collection> getCollections() {
		return this.collections;
		
	}
	
	/**
	 * Adds a bi-directional link of type Collection to the collections set.
	 * @param collection item to add
	 */
	public void addCollection(Collection collection) {
		collection.setState(this);
		this.collections.add(collection);
	}

  
    /**  
     * Set the value related to the column: collection.
	 * @param collection the collection value you wish to set
	 */
	public void setCollections(final Set<Collection> collection) {
		this.collections = collection;
	}

    /**
     * Return the value associated with the column: stateName.
	 * @return A String object (this.stateName)
	 */
	@Basic( optional = false )
	@Column( name = "state_name", nullable = false, length = 127  )
	public String getStateName() {
		return this.stateName;
		
	}
	

  
    /**  
     * Set the value related to the column: stateName.
	 * @param stateName the stateName value you wish to set
	 */
	public void setStateName(final String stateName) {
		this.stateName = stateName;
	}

    /**
     * Return the value associated with the column: stateType.
	 * @return A String object (this.stateType)
	 */
	@Basic( optional = false )
	@Column( name = "state_type", nullable = false, length = 127  )
	public String getStateType() {
		return this.stateType;
		
	}
	

  
    /**  
     * Set the value related to the column: stateType.
	 * @param stateType the stateType value you wish to set
	 */
	public void setStateType(final String stateType) {
		this.stateType = stateType;
	}

    /**
     * Return the value associated with the column: transition.
	 * @return A Set&lt;Transition&gt; object (this.transition)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.nextState"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	public Set<Transition> getTransitions() {
		return this.transitions;
		
	}
	
	/**
	 * Adds a bi-directional link of type Transition to the transitions set.
	 * @param transition item to add
	 */
	public void addTransition(Transition transition) {
		transition.getId().setNextState(this);
		this.transitions.add(transition);
	}

  
    /**  
     * Set the value related to the column: transition.
	 * @param transition the transition value you wish to set
	 */
	public void setTransitions(final Set<Transition> transition) {
		this.transitions = transition;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public State clone() throws CloneNotSupportedException {
		
        final State copy = (State)super.clone();

		if (this.getCollections() != null) {
			copy.getCollections().addAll(this.getCollections());
		}
		copy.setStateName(this.getStateName());
		copy.setStateType(this.getStateType());
		if (this.getTransitions() != null) {
			copy.getTransitions().addAll(this.getTransitions());
		}
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("stateName: " + this.getStateName() + ", ");
		sb.append("stateType: " + this.getStateType() + ", ");
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see Object#equals(Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final State that; 
		try {
			that = (State) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getStateName() == null) && (that.getStateName() == null)) || (getStateName() != null && getStateName().equals(that.getStateName())));
		result = result && (((getStateType() == null) && (that.getStateType() == null)) || (getStateType() != null && getStateType().equals(that.getStateType())));
		return result;
	}
	
	

	
}
