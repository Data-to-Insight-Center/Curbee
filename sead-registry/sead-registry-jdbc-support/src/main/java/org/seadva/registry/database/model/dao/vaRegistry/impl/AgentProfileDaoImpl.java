package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.apache.log4j.Logger;
import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.AgentProfileDao;
import org.seadva.registry.database.model.obj.vaRegistry.AgentProfile;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * DAO for table: AgentProfile.
 * @author autogenerated
 */

public class AgentProfileDaoImpl implements AgentProfileDao {

    private static Logger log = Logger.getLogger(AgentProfileDaoImpl.class);

    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }
    public AgentProfileDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
    }


    protected ObjectPool<Connection> connectionPool = null;

    @Override
    public boolean putAgentProfile(AgentProfile agentProfile, String agentId) {
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = getConnection();

            statement = connection.prepareStatement("INSERT INTO agent_profile values(?,?,?)");
            statement.setString(1, agentId);
            statement.setString(2, agentProfile.getId().getProfileType().getId());
            statement.setString(3, agentProfile.getProfileValue());
            statement.executeUpdate();

            statement.close();
            log.debug("Done resetting unfinished raw notifications");
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }

        return true;
    }
}

