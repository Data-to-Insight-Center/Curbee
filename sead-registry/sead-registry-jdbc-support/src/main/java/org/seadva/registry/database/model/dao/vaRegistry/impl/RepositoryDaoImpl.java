package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.RepositoryDao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 * DAO for table: Repository.
 * @author autogenerated
 */

public class RepositoryDaoImpl implements RepositoryDao {
    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }
    public RepositoryDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
    }


    protected ObjectPool<Connection> connectionPool = null;

    @Override
    public org.seadva.registry.database.model.obj.vaRegistry.Repository getRepository(String repositoryName) {
        org.seadva.registry.database.model.obj.vaRegistry.Repository repository = new  org.seadva.registry.database.model.obj.vaRegistry.Repository();
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();

            statement = connection.prepareStatement("Select * from repository where repository_name=?");
            statement.setString(1, repositoryName);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                repository.setId(resultSet.getString("repository_id"));
                repository.setRepositoryName(resultSet.getString("repository_name"));
                repository.setSoftwareType(resultSet.getString("software_type"));
                repository.setAffiliation(resultSet.getString("affiliation"));
                break;
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return repository;
    }

    @Override
    public org.seadva.registry.database.model.obj.vaRegistry.Repository getRepositoryById(String repositoryId) {
        org.seadva.registry.database.model.obj.vaRegistry.Repository repository = new  org.seadva.registry.database.model.obj.vaRegistry.Repository();
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();

            statement = connection.prepareStatement("Select * from repository where repository_id=?");
            statement.setString(1, repositoryId);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                repository.setId(resultSet.getString("repository_id"));
                repository.setRepositoryName(resultSet.getString("repository_name"));
                repository.setSoftwareType(resultSet.getString("software_type"));
                repository.setAffiliation(resultSet.getString("affiliation"));
                break;
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return repository;
    }
	}

