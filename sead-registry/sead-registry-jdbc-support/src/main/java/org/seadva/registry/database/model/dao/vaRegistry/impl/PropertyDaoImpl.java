package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.apache.log4j.Logger;
import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.MetadataTypeDao;
import org.seadva.registry.database.model.dao.vaRegistry.PropertyDao;
import org.seadva.registry.database.model.obj.vaRegistry.BaseEntity;
import org.seadva.registry.database.model.obj.vaRegistry.Property;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;


/**
 * DAO for table: Property.
 * @author autogenerated
 */

public class PropertyDaoImpl implements PropertyDao {
    private static Logger log = Logger.getLogger(PropertyDaoImpl.class);
    MetadataTypeDao metadataTypeDao;

    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }

    protected ObjectPool<Connection> connectionPool = null;

    public PropertyDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
        metadataTypeDao = new MetadataTypeDaoImpl();
    }

    @Override
    public List<Property> getProperties(String entityId) {
        List<Property> properties = new ArrayList<Property>();
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();
            statement = connection.prepareStatement("Select * from property where entity_id=?");
            statement.setString(1, entityId);
            ResultSet resultSet = null;
            resultSet = statement.executeQuery();

            while (resultSet.next()) {
                Property property = new Property();
                property.setId(resultSet.getLong("property_id"));
                BaseEntity entity = new BaseEntity();
                entity.setId(resultSet.getString("entity_id"));
                property.setEntity(entity);
                property.setMetadata(metadataTypeDao.getMetadataTypeById(resultSet.getString("metadata_id")));
                property.setValuestr(resultSet.getString("valueStr"));
                properties.add(property);
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return properties;
    }

    @Override
    public boolean putProperties(String entityId, Set<Property> properties) {
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = getConnection();
            for(Property property:properties){
                String insertStatement = "INSERT INTO property (entity_id, metadata_id, valueStr) values(?,?,?)";

                long propertyId = -1;
                if(property.getId()!=null&&property.getId()!=0)
                   propertyId =  property.getId();
                if(propertyId!=-1)
                    insertStatement = "UPDATE property SET entity_id = ?, metadata_id =?, valueStr=? WHERE property_id = ?";
                statement = connection.prepareStatement(insertStatement);
                statement.setString(1, property.getEntity().getId());
                statement.setString(2, property.getMetadata().getId());
                statement.setString(3, property.getValuestr());
                if(propertyId!=-1)
                    statement.setLong(4, propertyId);
                statement.executeUpdate();
                statement.close();
            }
            log.debug("Done resetting unfinished raw notifications");
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }

        return true;
    }

    @Override
    public boolean deleteProperties(String entityId) {
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = getConnection();
            String deleteStatement = "DELETE FROM property WHERE entity_id=?";
            statement = connection.prepareStatement(deleteStatement);
            statement.setString(1, entityId);
            statement.executeUpdate();
            statement.close();

            log.debug("Done resetting unfinished raw notifications");
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }

        return true;
    }
}

