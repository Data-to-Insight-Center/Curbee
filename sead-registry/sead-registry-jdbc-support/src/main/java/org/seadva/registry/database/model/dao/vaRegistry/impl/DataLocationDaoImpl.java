package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.apache.log4j.Logger;
import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.DataLocationDao;
import org.seadva.registry.database.model.dao.vaRegistry.RepositoryDao;
import org.seadva.registry.database.model.obj.vaRegistry.BaseEntity;
import org.seadva.registry.database.model.obj.vaRegistry.DataLocation;
import org.seadva.registry.database.model.obj.vaRegistry.DataLocationPK;
import org.seadva.registry.database.model.obj.vaRegistry.Repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * DAO for table: DataLocation.
 * @author autogenerated
 */

public class    DataLocationDaoImpl implements DataLocationDao {
    private static Logger log = Logger.getLogger(DataLocationDaoImpl.class);
    static RepositoryDao repositoryDao;
    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }

    protected ObjectPool<Connection> connectionPool = null;

    public DataLocationDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
        repositoryDao = new RepositoryDaoImpl();
    }

    @Override
    public List<DataLocation> getDataLocations(String entityId) {
        List<DataLocation> dataLocations = new ArrayList<DataLocation>();
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();
            statement = connection.prepareStatement("Select * from data_location where entity_id=?");
            statement.setString(1, entityId);
            ResultSet resultSet = null;
            resultSet = statement.executeQuery();

            while (resultSet.next()) {
                DataLocation dataLocation = new DataLocation();
                DataLocationPK dataLocationPK = new DataLocationPK();
                Repository repository =  repositoryDao.getRepositoryById(resultSet.getString("location_type_id"));
                 BaseEntity entity1 = new BaseEntity();
                entity1.setId(resultSet.getString("entity_id"));
                dataLocationPK.setEntity(entity1);
                dataLocationPK.setLocationType(repository);
                dataLocation.setId(dataLocationPK);
                dataLocation.setLocationValue(resultSet.getString("location_value"));
                dataLocation.setIsMasterCopy(resultSet.getInt("is_master_copy"));

                dataLocations.add(dataLocation);
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return dataLocations;
    }

    @Override
    public boolean putDataLocations(String entityId, Set<DataLocation> dataLocations) {
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = getConnection();
            for(DataLocation dataLocation:dataLocations){
                statement = connection.prepareStatement("INSERT INTO data_location " +
                        "(entity_id, location_type_id, location_value, is_master_copy) values(?,?,?,?) "+
                        "ON DUPLICATE KEY UPDATE " +
                        "location_value=?," +
                        "is_master_copy=?"
                );
                statement.setString(1, dataLocation.getId().getEntity().getId());
                statement.setString(2, dataLocation.getId().getLocationType().getId());
                statement.setString(3, dataLocation.getLocationValue());
                statement.setInt(4, dataLocation.getIsMasterCopy());
                statement.setString(5, dataLocation.getLocationValue());
                statement.setInt(6, dataLocation.getIsMasterCopy());
                statement.executeUpdate();
                statement.close();
            }
            log.debug("Done resetting unfinished raw notifications");
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }

        return true;
    }
	}

