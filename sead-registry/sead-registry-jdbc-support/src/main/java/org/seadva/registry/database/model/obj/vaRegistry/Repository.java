package org.seadva.registry.database.model.obj.vaRegistry;

import com.google.gson.annotations.Expose;
import org.hibernate.proxy.HibernateProxy;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IRepository;

import javax.persistence.*;
import java.io.Serializable;
import java.util.*;


/** 
 * Object mapping for hibernate-handled table: repository.
 * @author autogenerated
 */

@Entity
@Table(name = "repository", catalog = "va_registry")
public class Repository implements IRepository {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002622L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
    @Expose
	private String affiliation;
	/** Field mapping. */
	private Set<DataLocation> dataLocations = new HashSet<DataLocation>();

	/** Field mapping. */
    @Expose
	private String id;
	/** Field mapping. */
    @Expose
	private String repositoryName;
	/** Field mapping. */
    @Expose
	private String softwareType;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Repository() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Repository(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param affiliation String object;
	 * @param id String object;
	 * @param repositoryName String object;
	 * @param softwareType String object;
	 */
	public Repository(String affiliation, String id, String repositoryName, 					
			String softwareType) {

		this.affiliation = affiliation;
		this.id = id;
		this.repositoryName = repositoryName;
		this.softwareType = softwareType;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Repository.class;
	}
 

    /**
     * Return the value associated with the column: affiliation.
	 * @return A String object (this.affiliation)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 256  )
	public String getAffiliation() {
		return this.affiliation;
		
	}
	

  
    /**  
     * Set the value related to the column: affiliation.
	 * @param affiliation the affiliation value you wish to set
	 */
	public void setAffiliation(final String affiliation) {
		this.affiliation = affiliation;
	}

    /**
     * Return the value associated with the column: dataLocation.
	 * @return A Set&lt;DataLocation&gt; object (this.dataLocation)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.DETACH }, mappedBy = "id.locationType"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "repository_id", nullable = false  )
	public Set<DataLocation> getDataLocations() {
		return this.dataLocations;
		
	}
	
	/**
	 * Adds a bi-directional link of type DataLocation to the dataLocations set.
	 * @param dataLocation item to add
	 */
	public void addDataLocation(DataLocation dataLocation) {
		dataLocation.getId().setLocationType(this);
		this.dataLocations.add(dataLocation);
	}

  
    /**  
     * Set the value related to the column: dataLocation.
	 * @param dataLocation the dataLocation value you wish to set
	 */
	public void setDataLocations(final Set<DataLocation> dataLocation) {
		this.dataLocations = dataLocation;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "repository_id", nullable = false, length = 127  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: repositoryName.
	 * @return A String object (this.repositoryName)
	 */
	@Basic( optional = false )
	@Column( name = "repository_name", nullable = false, length = 127  )
	public String getRepositoryName() {
		return this.repositoryName;
		
	}
	

  
    /**  
     * Set the value related to the column: repositoryName.
	 * @param repositoryName the repositoryName value you wish to set
	 */
	public void setRepositoryName(final String repositoryName) {
		this.repositoryName = repositoryName;
	}

    /**
     * Return the value associated with the column: softwareType.
	 * @return A String object (this.softwareType)
	 */
	@Basic( optional = false )
	@Column( name = "software_type", nullable = false, length = 256  )
	public String getSoftwareType() {
		return this.softwareType;
		
	}
	

  
    /**  
     * Set the value related to the column: softwareType.
	 * @param softwareType the softwareType value you wish to set
	 */
	public void setSoftwareType(final String softwareType) {
		this.softwareType = softwareType;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Repository clone() throws CloneNotSupportedException {
		
        final Repository copy = (Repository)super.clone();

		copy.setAffiliation(this.getAffiliation());
		if (this.getDataLocations() != null) {
			copy.getDataLocations().addAll(this.getDataLocations());
		}
		copy.setId(this.getId());
		copy.setRepositoryName(this.getRepositoryName());
		copy.setSoftwareType(this.getSoftwareType());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("affiliation: " + this.getAffiliation() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("repositoryName: " + this.getRepositoryName() + ", ");
		sb.append("softwareType: " + this.getSoftwareType());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see Object#equals(Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Repository that; 
		try {
			that = (Repository) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAffiliation() == null) && (that.getAffiliation() == null)) || (getAffiliation() != null && getAffiliation().equals(that.getAffiliation())));
		result = result && (((getRepositoryName() == null) && (that.getRepositoryName() == null)) || (getRepositoryName() != null && getRepositoryName().equals(that.getRepositoryName())));
		result = result && (((getSoftwareType() == null) && (that.getSoftwareType() == null)) || (getSoftwareType() != null && getSoftwareType().equals(that.getSoftwareType())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
