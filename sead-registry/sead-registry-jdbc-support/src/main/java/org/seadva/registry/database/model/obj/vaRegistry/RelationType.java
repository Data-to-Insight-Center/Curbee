package org.seadva.registry.database.model.obj.vaRegistry;

import com.google.gson.annotations.Expose;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IRelationType;

import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;


/** 
 * Object mapping for hibernate-handled table: relation_type.
 * @author autogenerated
 */

public class RelationType implements IRelationType {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002623L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
    @Expose
	private String id;
	/** Field mapping. */
	//private Set<Relation> relations = new HashSet<Relation>();

	/** Field mapping. */
    @Expose
	private String relationElement;
	/** Field mapping. */
    @Expose
	private String relationSchema;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public RelationType() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public RelationType(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id String object;
	 * @param relationElement String object;
	 * @param relationSchema String object;
	 */
	public RelationType(String id, String relationElement, String relationSchema) {

		this.id = id;
		this.relationElement = relationElement;
		this.relationSchema = relationSchema;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	public Class<?> getClassType() {
		return RelationType.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */

	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: relation.
	 * @return A Set&lt;Relation&gt; object (this.relation)
	 */
 	/*@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.relationType"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "relation_type_id", nullable = false  )
	public Set<Relation> getRelations() {
		return this.relations;

	}*/
	
	/**
	 * Adds a bi-directional link of type Relation to the relations set.
	 * @param relation item to add
	 */
	/*public void addRelation(Relation relation) {
		relation.getId().setRelationType(this);
		this.relations.add(relation);
	}*/

  
    /**  
     * Set the value related to the column: relation.
	 * @param relation the relation value you wish to set
	 */
	/*public void setRelations(final Set<Relation> relation) {
		this.relations = relation;
	}*/

    /**
     * Return the value associated with the column: relationElement.
	 * @return A String object (this.relationElement)
	 */

	public String getRelationElement() {
		return this.relationElement;
		
	}
	

  
    /**  
     * Set the value related to the column: relationElement.
	 * @param relationElement the relationElement value you wish to set
	 */
	public void setRelationElement(final String relationElement) {
		this.relationElement = relationElement;
	}

    /**
     * Return the value associated with the column: relationSchema.
	 * @return A String object (this.relationSchema)
	 */
	public String getRelationSchema() {
		return this.relationSchema;
		
	}
	

  
    /**  
     * Set the value related to the column: relationSchema.
	 * @param relationSchema the relationSchema value you wish to set
	 */
	public void setRelationSchema(final String relationSchema) {
		this.relationSchema = relationSchema;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public RelationType clone() throws CloneNotSupportedException {
		
        final RelationType copy = (RelationType)super.clone();

		copy.setId(this.getId());
		/*if (this.getRelations() != null) {
			copy.getRelations().addAll(this.getRelations());
		}*/
		copy.setRelationElement(this.getRelationElement());
		copy.setRelationSchema(this.getRelationSchema());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("relationElement: " + this.getRelationElement() + ", ");
		sb.append("relationSchema: " + this.getRelationSchema());
		return sb.toString();		
	}


	/** Calculate the hashcode.
	 * @see Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
