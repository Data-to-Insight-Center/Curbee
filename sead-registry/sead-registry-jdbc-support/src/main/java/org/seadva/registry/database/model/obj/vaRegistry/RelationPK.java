package org.seadva.registry.database.model.obj.vaRegistry;

import com.google.gson.annotations.Expose;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IRelationPK;


/**
 * Object mapping for hibernate-handled table: relation.
 * @author autogenerated
 */


public class RelationPK implements  IRelationPK {

    /** Serial Version UID. */
    private static final long serialVersionUID = -559002624L;



    /** Field mapping. */
    @Expose
    private BaseEntity cause;

    /** Field mapping. */
    @Expose
    private BaseEntity effect;

    /** Field mapping. */
    @Expose
    private RelationType relationType;





    /** Return the type of this class. Useful for when dealing with proxies.
     * @return Defining class.
     */
    public Class<?> getClassType() {
        return RelationPK.class;
    }


    /**
     * Return the value associated with the column: cause.
     * @return A BaseEntity object (this.cause)
     */
    public BaseEntity getCause() {
        return this.cause;

    }



    /**
     * Set the value related to the column: cause.
     * @param cause the cause value you wish to set
     */
    public void setCause(final BaseEntity cause) {
        this.cause = cause;
    }

    /**
     * Return the value associated with the column: effect.
     * @return A BaseEntity object (this.effect)
     */
    public BaseEntity getEffect() {
        return this.effect;

    }



    /**
     * Set the value related to the column: effect.
     * @param effect the effect value you wish to set
     */
    public void setEffect(final BaseEntity effect) {
        this.effect = effect;
    }

    /**
     * Return the value associated with the column: relationType.
     * @return A RelationType object (this.relationType)
     */
    public RelationType getRelationType() {
        return this.relationType;

    }



    /**
     * Set the value related to the column: relationType.
     * @param relationType the relationType value you wish to set
     */
    public void setRelationType(final RelationType relationType) {
        this.relationType = relationType;
    }


    /**
     * Deep copy.
     * @return cloned object
     * @throws CloneNotSupportedException on error
     */
    @Override
    public RelationPK clone() throws CloneNotSupportedException {

        final RelationPK copy = (RelationPK)super.clone();

        return copy;
    }



    /** Provides toString implementation.
     * @see Object#toString()
     * @return String representation of this class.
     */
    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer();

        return sb.toString();
    }


    /** Equals implementation.
     * @see Object#equals(Object)
     * @param aThat Object to compare with
     * @return true/false
     */
    @Override
    public boolean equals(final Object aThat) {
        Object proxyThat = aThat;

        if ( this == aThat ) {
            return true;
        }

        if (aThat == null)  {
            return false;
        }

        final RelationPK that;
        try {
            that = (RelationPK) proxyThat;
            if ( !(that.getClassType().equals(this.getClassType()))){
                return false;
            }
        } catch (org.hibernate.ObjectNotFoundException e) {
            return false;
        } catch (ClassCastException e) {
            return false;
        }


        boolean result = true;
        result = result && (((getCause() == null) && (that.getCause() == null)) || (getCause() != null && getCause().getId().equals(that.getCause().getId())));
        result = result && (((getEffect() == null) && (that.getEffect() == null)) || (getEffect() != null && getEffect().getId().equals(that.getEffect().getId())));
        result = result && (((getRelationType() == null) && (that.getRelationType() == null)) || (getRelationType() != null && getRelationType().getId().equals(that.getRelationType().getId())));
        return result;
    }

    /** Calculate the hashcode.
     * @see Object#hashCode()
     * @return a calculated number
     */
    @Override
    public int hashCode() {
        int hash = 0;
        hash = hash + getCause().hashCode();
        hash = hash + getEffect().hashCode();
        hash = hash + getRelationType().hashCode();
        return hash;
    }



}
