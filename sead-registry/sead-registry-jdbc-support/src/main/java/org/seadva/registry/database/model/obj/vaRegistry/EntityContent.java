package org.seadva.registry.database.model.obj.vaRegistry;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;

import org.seadva.registry.database.model.obj.vaRegistry.iface.IEntityContent;


/** 
 * Object mapping for hibernate-handled table: entity_content.
 * @author autogenerated
 */

public class EntityContent implements IEntityContent {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002641L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private BaseEntity entity;
	/** Field mapping. */
	private Byte[] entityContentData;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public EntityContent() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public EntityContent(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param entity BaseEntity object;
	 * @param id Integer object;
	 */
	public EntityContent(BaseEntity entity, Integer id) {

		this.entity = entity;
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	public Class<?> getClassType() {
		return EntityContent.class;
	}
 

    /**
     * Return the value associated with the column: entity.
	 * @return A BaseEntity object (this.entity)
	 */
	public BaseEntity getEntity() {
		return this.entity;
		
	}
	

  
    /**  
     * Set the value related to the column: entity.
	 * @param entity the entity value you wish to set
	 */
	public void setEntity(final BaseEntity entity) {
		this.entity = entity;
	}

    /**
     * Return the value associated with the column: entityContentData.
	 * @return A Byte[] object (this.entityContentData)
	 */
	public Byte[] getEntityContentData() {
		return this.entityContentData;
		
	}
	

  
    /**  
     * Set the value related to the column: entityContentData.
	 * @param entityContentData the entityContentData value you wish to set
	 */
	public void setEntityContentData(final Byte[] entityContentData) {
		this.entityContentData = entityContentData;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */

	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public EntityContent clone() throws CloneNotSupportedException {
		
        final EntityContent copy = (EntityContent)super.clone();

		copy.setEntity(this.getEntity());
		copy.setEntityContentData(this.getEntityContentData());
		copy.setId(this.getId());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("entityContentData: " + (this.entityContentData == null ? null : Arrays.toString(this.getEntityContentData())) + ", ");
		sb.append("id: " + this.getId());
		return sb.toString();		
	}

	
}
