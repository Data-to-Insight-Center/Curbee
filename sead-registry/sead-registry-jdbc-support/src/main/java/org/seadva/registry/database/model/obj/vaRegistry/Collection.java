package org.seadva.registry.database.model.obj.vaRegistry;

import com.google.gson.annotations.Expose;
import org.seadva.registry.database.enums.subtype.vaRegistry.BaseEntitySubclassType;
import org.seadva.registry.database.model.obj.vaRegistry.iface.ICollection;

import javax.persistence.*;


/** 
 * Object mapping for hibernate-handled table: collection.
 * @author autogenerated
 */

public class Collection extends BaseEntity implements ICollection {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002649L;

	

	/** Field mapping. */
    @Expose
	private Integer isObsolete;
	/** Field mapping. */
    @Expose
	private String name;
	/** Field mapping. */
    @Expose
	private State state;
	/** Field mapping. */
    @Expose
	private String versionNum;

    public Collection(){}
    public Collection(BaseEntity entity){
        this.setId(entity.getId());
        this.setEntityName(entity.getEntityName());
        this.setEntityCreatedTime(entity.getEntityCreatedTime());
        this.setEntityLastUpdatedTime(entity.getEntityLastUpdatedTime());
        this.setProperties(entity.getProperties());
         if(entity.getDataIdentifiers()!=null)
            this.setDataIdentifiers(entity.getDataIdentifiers());
        if(entity.getDataLocations()!=null)
            this.setDataLocations(entity.getDataLocations());
    }
	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return BaseEntitySubclassType enum.
 	 */

 	public BaseEntitySubclassType getBaseEntitySubclassType() {
		return BaseEntitySubclassType.COLLECTION;
 	}  

 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return Collection.class;
	}
 

    /**
     * Return the value associated with the column: isObsolete.
	 * @return A Integer object (this.isObsolete)
	 */
	@Basic( optional = true )
	@Column( name = "is_obsolete"  )
	public Integer getIsObsolete() {
		return this.isObsolete;
		
	}
	

  
    /**  
     * Set the value related to the column: isObsolete.
	 * @param isObsolete the isObsolete value you wish to set
	 */
	public void setIsObsolete(final Integer isObsolete) {
		this.isObsolete = isObsolete;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 127  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}


	public State getState() {
		return this.state;
		
	}
	

  
    /**  
     * Set the value related to the column: state.
	 * @param state the state value you wish to set
	 */
	public void setState(final State state) {
		this.state = state;
	}

    /**
     * Return the value associated with the column: versionNum.
	 * @return A String object (this.versionNum)
	 */
	public String getVersionNum() {
		return this.versionNum;
		
	}
	

  
    /**  
     * Set the value related to the column: versionNum.
	 * @param versionNum the versionNum value you wish to set
	 */
	public void setVersionNum(final String versionNum) {
		this.versionNum = versionNum;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Collection clone() throws CloneNotSupportedException {
		
        final Collection copy = (Collection)super.clone();

		copy.setIsObsolete(this.getIsObsolete());
		copy.setName(this.getName());
		copy.setState(this.getState());
		copy.setVersionNum(this.getVersionNum());
		return copy;
	}




	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("isObsolete: " + this.getIsObsolete() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("versionNum: " + this.getVersionNum());
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}
}
