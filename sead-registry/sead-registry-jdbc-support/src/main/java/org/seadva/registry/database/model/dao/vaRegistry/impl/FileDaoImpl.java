package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.apache.log4j.Logger;
import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.BaseEntityDao;
import org.seadva.registry.database.model.dao.vaRegistry.FileDao;
import org.seadva.registry.database.model.obj.vaRegistry.BaseEntity;
import org.seadva.registry.database.model.obj.vaRegistry.File;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 * DAO for table: File.
 * @author autogenerated
 */

public class FileDaoImpl implements FileDao {
    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }
    public FileDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
        baseEntityDao = new BaseEntityDaoImpl();
    }
    private static Logger log = Logger.getLogger(FileDaoImpl.class);
    BaseEntityDao baseEntityDao;
    protected ObjectPool<Connection> connectionPool = null;

    @Override
    public File getFile(String entityId) {

        File file = null;
        Connection connection = null;
        PreparedStatement statement = null;
        boolean isFile = false;

        try {
            connection = getConnection();

            statement = connection.prepareStatement("Select * from file where entity_id=?");
            statement.setString(1, entityId);
            ResultSet resultSet = statement.executeQuery();

            String fileName = null;
            int isObsolete = 0;
            long fileSize = -1;

            while (resultSet.next()) {
                fileName = resultSet.getString("file_name");
                isObsolete = resultSet.getInt("is_obsolete");
                fileSize = resultSet.getLong("size_bytes");
                isFile = true;
                break;
            }

            if(isFile){
                BaseEntity entity = new BaseEntityDaoImpl().getBaseEntity(entityId);
                file = new File(entity);
                file.setFileName(fileName);
                file.setIsObsolete(isObsolete);
                file.setSizeBytes(fileSize);
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return file;
    }

    @Override
    public boolean insertFile(File file) {

        Connection connection = null;
        PreparedStatement statement = null;
        try {
            baseEntityDao.insertEntity(file);
            connection = getConnection();
            statement = connection.prepareStatement("INSERT INTO file (entity_id, file_name, size_bytes, version_num) values(?,?,?,?)" +
                    "ON DUPLICATE KEY UPDATE " +
                    "file_name=?," +
                    "size_bytes=?," +
                    "version_num=?");

            statement.setString(1, file.getId());
            String fileName = file.getFileName();
            if(fileName==null)
                fileName = file.getEntityName();

            statement.setString(2, fileName);
            if(file.getSizeBytes()==null)
                statement.setLong(3,-1);
            else
                statement.setLong(3, file.getSizeBytes());
            String versionNum = "1";
            if(file.getVersionNum()!=null)
                versionNum = file.getVersionNum();
            statement.setString(4,versionNum);

            statement.setString(5, fileName);
            if(file.getSizeBytes()==null)
                statement.setLong(6,-1);
            else
                statement.setLong(6, file.getSizeBytes());

            statement.setString(7,versionNum);

            statement.executeUpdate();
            statement.close();

            log.debug("Done resetting unfinished raw notifications");
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }

        return true;

    }

}

