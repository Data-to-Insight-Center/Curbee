package org.seadva.registry.database.model.obj.vaRegistry;

import com.google.gson.annotations.Expose;
import org.seadva.registry.database.enums.subtype.vaRegistry.BaseEntitySubclassType;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IBaseEntity;

import java.io.Serializable;
import java.util.*;


/** 
 * Object mapping for hibernate-handled table: base_entity.
 * @author autogenerated
 */


public class BaseEntity implements IBaseEntity {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002650L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	//private Set<Aggregation> aggregations = new HashSet<Aggregation>();

	/** Field mapping. */
    @Expose
	private Set<DataIdentifier> dataIdentifiers = new HashSet<DataIdentifier>();

	/** Field mapping. */
    @Expose
	private Set<DataLocation> dataLocations = new HashSet<DataLocation>();

	/** Field mapping. */
	private Set<EntityContent> entityContents = new HashSet<EntityContent>();

	/** Field mapping. */
    @Expose
	private Date entityCreatedTime;
	/** Field mapping. */
    @Expose
	private Date entityLastUpdatedTime;
	/** Field mapping. */
    @Expose
	private String entityName;
	/** Field mapping. */
    @Expose
	private String id;
	/** Field mapping. */
	private Set<MetadataReference> metadataReferences = new HashSet<MetadataReference>();

	/** Field mapping. */
    @Expose
	private Set<Property> properties = new HashSet<Property>();

	/** Field mapping. */
//    @Expose
//	private Set<Relation> relations = new HashSet<Relation>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public BaseEntity() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public BaseEntity(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param entityCreatedTime Date object;
	 * @param entityLastUpdatedTime Date object;
	 * @param entityName String object;
	 * @param id String object;
	 */
	public BaseEntity(Date entityCreatedTime, Date entityLastUpdatedTime, String entityName, 					
			String id) {

		this.entityCreatedTime = entityCreatedTime;
		this.entityLastUpdatedTime = entityLastUpdatedTime;
		this.entityName = entityName;
		this.id = id;
	}
	
 


 	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return BaseEntitySubclassType enum.
 	 */

 	public BaseEntitySubclassType getBaseEntitySubclassType() {
		return BaseEntitySubclassType.NOT_A_CHILD;
 	}  
  
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/

	public Class<?> getClassType() {
		return BaseEntity.class;
	}
 

    /**
     * Return the value associated with the column: aggregation.
	 * @return A Set&lt;Aggregation&gt; object (this.aggregation)
	 */
 	/*@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.child"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "entity_id", nullable = false  )
	public Set<Aggregation> getAggregations() {
		return this.aggregations;
		
	}*/
	
	/**
	 * Adds a bi-directional link of type Aggregation to the aggregations set.
	 * @param aggregation item to add
	 */
	/*public void addAggregation(Aggregation aggregation) {
		this.aggregations.add(aggregation);
	}*/

  
    /**  
     * Set the value related to the column: aggregation.
	 * @param aggregation the aggregation value you wish to set
	 */
/*	public void setAggregations(final Set<Aggregation> aggregation) {
		this.aggregations = aggregation;
	}*/

    /**
     * Return the value associated with the column: dataIdentifier.
	 * @return A Set&lt;DataIdentifier&gt; object (this.dataIdentifier)
	 */
	public Set<DataIdentifier> getDataIdentifiers() {
		return this.dataIdentifiers;
		
	}
	
	/**
	 * Adds a bi-directional link of type DataIdentifier to the dataIdentifiers set.
	 * @param dataIdentifier item to add
	 */
	public void addDataIdentifier(DataIdentifier dataIdentifier) {
		dataIdentifier.getId().setEntity(this);
		this.dataIdentifiers.add(dataIdentifier);
	}

  
    /**  
     * Set the value related to the column: dataIdentifier.
	 * @param dataIdentifier the dataIdentifier value you wish to set
	 */
	public void setDataIdentifiers(final Set<DataIdentifier> dataIdentifier) {
		this.dataIdentifiers = dataIdentifier;
	}

    /**
     * Return the value associated with the column: dataLocation.
	 * @return A Set&lt;DataLocation&gt; object (this.dataLocation)
	 */

	public Set<DataLocation> getDataLocations() {
		return this.dataLocations;
		
	}
	
	/**
	 * Adds a bi-directional link of type DataLocation to the dataLocations set.
	 * @param dataLocation item to add
	 */
	public void addDataLocation(DataLocation dataLocation) {
		dataLocation.getId().setEntity(this);
		this.dataLocations.add(dataLocation);
	}

  
    /**  
     * Set the value related to the column: dataLocation.
	 * @param dataLocation the dataLocation value you wish to set
	 */
	public void setDataLocations(final Set<DataLocation> dataLocation) {
		this.dataLocations = dataLocation;
	}

    /**
     * Return the value associated with the column: entityContent.
	 * @return A Set&lt;EntityContent&gt; object (this.entityContent)
	 */

	public Set<EntityContent> getEntityContents() {
		return this.entityContents;
		
	}
	
	/**
	 * Adds a bi-directional link of type EntityContent to the entityContents set.
	 * @param entityContent item to add
	 */
	public void addEntityContent(EntityContent entityContent) {
		entityContent.setEntity(this);
		this.entityContents.add(entityContent);
	}

  
    /**  
     * Set the value related to the column: entityContent.
	 * @param entityContent the entityContent value you wish to set
	 */
	public void setEntityContents(final Set<EntityContent> entityContent) {
		this.entityContents = entityContent;
	}

    /**
     * Return the value associated with the column: entityCreatedTime.
	 * @return A Date object (this.entityCreatedTime)
	 */

	public Date getEntityCreatedTime() {
		return this.entityCreatedTime;
		
	}
	

  
    /**  
     * Set the value related to the column: entityCreatedTime.
	 * @param entityCreatedTime the entityCreatedTime value you wish to set
	 */
	public void setEntityCreatedTime(final Date entityCreatedTime) {
		this.entityCreatedTime = entityCreatedTime;
	}

    /**
     * Return the value associated with the column: entityLastUpdatedTime.
	 * @return A Date object (this.entityLastUpdatedTime)
	 */

	public Date getEntityLastUpdatedTime() {
		return this.entityLastUpdatedTime;
		
	}
	

  
    /**  
     * Set the value related to the column: entityLastUpdatedTime.
	 * @param entityLastUpdatedTime the entityLastUpdatedTime value you wish to set
	 */
	public void setEntityLastUpdatedTime(final Date entityLastUpdatedTime) {
		this.entityLastUpdatedTime = entityLastUpdatedTime;
	}

    /**
     * Return the value associated with the column: entityName.
	 * @return A String object (this.entityName)
	 */

	public String getEntityName() {
		return this.entityName;
		
	}
	

  
    /**  
     * Set the value related to the column: entityName.
	 * @param entityName the entityName value you wish to set
	 */
	public void setEntityName(final String entityName) {
		this.entityName = entityName;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */

	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: metadataReference.
	 * @return A Set&lt;MetadataReference&gt; object (this.metadataReference)
	 */

	public Set<MetadataReference> getMetadataReferences() {
		return this.metadataReferences;
		
	}
	
	/**
	 * Adds a bi-directional link of type MetadataReference to the metadataReferences set.
	 * @param metadataReference item to add
	 */
	public void addMetadataReference(MetadataReference metadataReference) {
		metadataReference.setObjectEntity(this);
		this.metadataReferences.add(metadataReference);
	}

  
    /**  
     * Set the value related to the column: metadataReference.
	 * @param metadataReference the metadataReference value you wish to set
	 */
	public void setMetadataReferences(final Set<MetadataReference> metadataReference) {
		this.metadataReferences = metadataReference;
	}

    /**
     * Return the value associated with the column: property.
	 * @return A Set&lt;Property&gt; object (this.property)
	 */

	public Set<Property> getProperties() {
		return this.properties;
		
	}
	
	/**
	 * Adds a bi-directional link of type Property to the properties set.
	 * @param property item to add
	 */
	public void addProperty(Property property) {
		/*property.setEntity(this);

        //Prevent multiple records for singleValued metadata types

        boolean thisSingleValuedExists = false;

        Set<Property> existingProperties = this.properties;
        for(Property existingProperty:existingProperties){  //Update single Valued attribute if it already exists
            String metadataElement = existingProperty.getMetadata().getMetadataElement();
            if(property.getMetadata().getMetadataElement().equalsIgnoreCase(metadataElement)&&Constants.singleValuedMetadataTypes.contains(metadataElement)){
                existingProperty.setValuestr(property.getValuestr());
                thisSingleValuedExists = false;
                break;
            }
        }

        //Prevent duplicate record entry
        for(Property existingProperty:this.properties){
            if(property.getEntity().getId().equalsIgnoreCase(existingProperty.getEntity().getId())
                    &&(property.getMetadata().getId().equalsIgnoreCase(existingProperty.getMetadata().getId()))
                    &&(property.getValuestr().equalsIgnoreCase(existingProperty.getValuestr())))
                return;
        }

        if(!thisSingleValuedExists)
		    this.properties.add(property);
        else
            this.properties = existingProperties;*/
        if(this.properties==null)
            this.properties = new HashSet<Property>();
        this.properties.add(property);
	}

  
    /**  
     * Set the value related to the column: property.
	 * @param property the property value you wish to set
	 */
	public void setProperties(final Set<Property> property) {

       /* Set<Property> existingProperties = new HashSet<Property>(property);
        List<String> singleValuedMetadataType = new ArrayList<String>();

        for(Property existingProperty:existingProperties){
            String metadataElement = existingProperty.getMetadata().getMetadataElement();
            if(Constants.singleValuedMetadataTypes.contains(metadataElement)) {
                if(singleValuedMetadataType.contains(metadataElement))//Single valued and there are duplicates
                    property.remove(existingProperty);
                else
                    singleValuedMetadataType.add(metadataElement);
            }
        }

        existingProperties = new HashSet<Property>(property);*/

        //Prevent duplicate record entry - todo if needed, by overriding SET unique comparison
       /* for(Property existingProperty:existingProperties){
            if(property.getEntity().getId().equalsIgnoreCase(existingProperty.getEntity().getId())
                    &&(property.getMetadata().getId().equalsIgnoreCase(existingProperty.getMetadata().getId()))
                    &&(property.getValuestr().equalsIgnoreCase(existingProperty.getValuestr())))
                return;
        }*/
		this.properties = property;
	}


    public void setProperties(final Set<Property> oldProperties, final Set<Property> newProperties) {

        Set<Property> existingProperties = new HashSet<Property>(newProperties);
        List<String> singleValuedMetadataType = new ArrayList<String>();

        //Esnure new properties have only one record for single valued properties
        for(Property existingProperty:existingProperties){
            String metadataElement = existingProperty.getMetadata().getMetadataElement();
            if(Constants.singleValuedMetadataTypes.contains(metadataElement)) {
                if(singleValuedMetadataType.contains(metadataElement))//Single valued and there are duplicates
                    newProperties.remove(existingProperty);
                else
                    singleValuedMetadataType.add(metadataElement);
            }
        }

        //Check if a a new property is a duplicate of what already exists in DB, then just skip this new property
        existingProperties = new HashSet<Property>(newProperties);
        for(Property newProperty:existingProperties){
            String metadataElement = newProperty.getMetadata().getMetadataElement();
            for(Property oldProperty: oldProperties){
                if(metadataElement.equalsIgnoreCase(oldProperty.getMetadata().getMetadataElement())
                        && newProperty.getValuestr().equalsIgnoreCase(oldProperty.getValuestr())){//If already in database
                    //just remove
                    newProperties.remove(newProperty);
                    break;
                }
            }
        }

        //Check if a new single valued property already exists in DB and just needs an update of its value

        existingProperties = new HashSet<Property>(newProperties);
        for(Property newProperty:existingProperties){
            String metadataElement = newProperty.getMetadata().getMetadataElement();
            for(Property oldProperty: oldProperties){
                if(Constants.singleValuedMetadataTypes.contains(metadataElement)) {//If single valued
                    if(metadataElement.equalsIgnoreCase(oldProperty.getMetadata().getMetadataElement())){//If already in database
                        //just update
                        newProperties.remove(newProperty);
                        oldProperty.setValuestr(newProperty.getValuestr());
                        newProperties.add(oldProperty);
                        break;
                    }
                }
            }
        }



        this.properties = newProperties;
    }

    /**
     * Return the value associated with the column: relation.
	 * @return A Set&lt;Relation&gt; object (this.relation)
	 */
 	/*@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.DETACH }, mappedBy = "id.cause"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "entity_id", nullable = false  )   */
	/*public Set<Relation> getRelations() {
		return this.relations;
		
	}*/
	
	/**
	 * Adds a bi-directional link of type Relation to the relations set.
	 * @param relation item to add
	 */
	/*public void addRelation(Relation relation) {
		relation.getId().setCause(this);
		this.relations.add(relation);
	}*/

  
    /**  
     * Set the value related to the column: relation.
	 * @param relation the relation value you wish to set
	 */
	/*public void setRelations(final Set<Relation> relation) {
		this.relations = relation;
	}*/


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public BaseEntity clone() throws CloneNotSupportedException {
		
        final BaseEntity copy = (BaseEntity)super.clone();

		/*if (this.getAggregations() != null) {
			copy.getAggregations().addAll(this.getAggregations());
		}*/
		if (this.getDataIdentifiers() != null) {
			copy.getDataIdentifiers().addAll(this.getDataIdentifiers());
		}
		if (this.getDataLocations() != null) {
			copy.getDataLocations().addAll(this.getDataLocations());
		}
		if (this.getEntityContents() != null) {
			copy.getEntityContents().addAll(this.getEntityContents());
		}
		copy.setEntityCreatedTime(this.getEntityCreatedTime());
		copy.setEntityLastUpdatedTime(this.getEntityLastUpdatedTime());
		copy.setEntityName(this.getEntityName());
		copy.setId(this.getId());
		if (this.getMetadataReferences() != null) {
			copy.getMetadataReferences().addAll(this.getMetadataReferences());
		}
		if (this.getProperties() != null) {
			copy.getProperties().addAll(this.getProperties());
		}
		/*if (this.getRelations() != null) {
			copy.getRelations().addAll(this.getRelations());
		}*/
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("entityCreatedTime: " + this.getEntityCreatedTime() + ", ");
		sb.append("entityLastUpdatedTime: " + this.getEntityLastUpdatedTime() + ", ");
		sb.append("entityName: " + this.getEntityName() + ", ");
		sb.append("id: " + this.getId() + ", ");
		return sb.toString();		
	}

}
