package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.apache.log4j.Logger;
import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.AgentDao;
import org.seadva.registry.database.model.dao.vaRegistry.AgentProfileDao;
import org.seadva.registry.database.model.dao.vaRegistry.AgentRoleDao;
import org.seadva.registry.database.model.dao.vaRegistry.BaseEntityDao;
import org.seadva.registry.database.model.obj.vaRegistry.Agent;
import org.seadva.registry.database.model.obj.vaRegistry.AgentProfile;
import org.seadva.registry.database.model.obj.vaRegistry.AgentRole;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;


/**
 * DAO for table: Agent.
 * @author autogenerated
 */

public class AgentDaoImpl implements AgentDao {

    private static Logger log = Logger.getLogger(AgentDaoImpl.class);

    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }

    protected ObjectPool<Connection> connectionPool = null;
    AgentRoleDao agentRoleDao;
    AgentProfileDao agentProfileDao;
    BaseEntityDao baseEntityDao;

    public AgentDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
        agentRoleDao = new AgentRoleDaoImpl();
        agentProfileDao = new AgentProfileDaoImpl();
        baseEntityDao = new BaseEntityDaoImpl();
    }

    @Override
    public boolean putAgent(Agent agent) {

        baseEntityDao.insertEntity(agent);
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = getConnection();
            statement = connection.prepareStatement("INSERT INTO agent values(?,?,?)");
            statement.setString(1, agent.getId());
            statement.setString(2, agent.getFirstName());
            statement.setString(3, agent.getLastName());
            statement.executeUpdate();

            statement.close();
            log.debug("Done inserting agent");
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }

        for(AgentRole role: agent.getAgentRoles()){
            agentRoleDao.putAgentRole(role, agent.getId());
        }

        for(AgentProfile profile: agent.getAgentProfiles()){
            agentProfileDao.putAgentProfile(profile, agent.getId());
        }

        return true;

    }
}

