package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.MetadataTypeDao;
import org.seadva.registry.database.model.obj.vaRegistry.MetadataType;
import org.springframework.stereotype.Repository;

import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 * DAO for table: MetadataType.
 * @author autogenerated
 */
@Repository
public class MetadataTypeDaoImpl implements MetadataTypeDao {

    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }
    public MetadataTypeDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
    }


    protected ObjectPool<Connection> connectionPool = null;

    @Override
    public MetadataType getMetadataType(String metadataName) {
        metadataName = URLDecoder.decode(metadataName);
        MetadataType metadataType = new MetadataType();
        Connection connection = null;
        PreparedStatement statement = null;

        // Fix to handle dc/terms/creator and dc/elements/1.1/creator
        String ns = null;
        String splitChar = "/";
        if(metadataName.contains("#"))
            splitChar = "#";
        if (metadataName.contains(splitChar)) {
            int index = metadataName.lastIndexOf(splitChar);
            ns = metadataName.substring(0, index + 1);
            metadataName = metadataName.substring(index + 1);
        }

        try {
            connection = getConnection();
            if (ns != null) {
                statement = connection.prepareStatement("Select * from metadata_type where metadata_schema=? and metadata_element=?");
                statement.setString(1, ns);
                statement.setString(2, metadataName);
            } else {
                statement = connection.prepareStatement("Select * from metadata_type where metadata_element=?");
                statement.setString(1, metadataName);
            }
            ResultSet resultSet = statement.executeQuery();


            while (resultSet.next()) {
                metadataType.setId(resultSet.getString("metadata_id"));
                metadataType.setMetadataElement(resultSet.getString("metadata_element"));
                metadataType.setMetadataSchema(resultSet.getString("metadata_schema"));
                break;
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return metadataType;
    }

    @Override
    public MetadataType getMetadataTypeById(String metadataId) {
        MetadataType metadataType = new MetadataType();
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();

            statement = connection.prepareStatement("Select * from metadata_type where metadata_id=?");
            statement.setString(1, metadataId);
            ResultSet resultSet = statement.executeQuery();


            while (resultSet.next()) {
                metadataType.setId(resultSet.getString("metadata_id"));
                metadataType.setMetadataElement(resultSet.getString("metadata_element"));
                metadataType.setMetadataSchema(resultSet.getString("metadata_schema"));
                break;
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return metadataType;
    }
}

